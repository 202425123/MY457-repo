unlist(te_plot_data[5, 2:11]), unlist(te_plot_data[6, 2:11]),
unlist(te_plot_data[7, 2:11]), unlist(te_plot_data[8, 2:11]),
unlist(te_plot_data[9, 2:11]), unlist(te_plot_data[10, 2:11]))
te_plot_data2 <- tibble(.rows = 100) %>%
mutate(sampsize = factor(as.character(sampsize2),
levels = unique(sampsize2)),
treat_effect = te)
```
The treatment effect estimates from the 100 simulated datasets (ten samples drawn from each of ten different sample sizes) are presented below. In the plots, the black dots represent treatment effect estimates. The true average treatment effect calculated by taking the average difference between all $Y_{1}$ and all $Y_{0}$ potential outcomes is presented as the red reference line.
```{r}
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
#  geom_vline(xintercept = confint(d_reg)[2, 1], color = 'grey',
#             linetype = 'dashed') +
#  geom_vline(xintercept = confint(d_reg)[2, 2], color = 'grey',
#             linetype = 'dashed') +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
p15 <- ggplot(data = te_plot_data2,
aes(x = sampsize, y = treat_effect, fill = sampsize)) +
geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
ggarrange(p14, p15, nrow = 2)
```
While the averages of the estimated treatment effects for each sample size tend to hover around the value of the true treatment effect, we see that the estimates for the smaller sample sizes are indeed substantially more variable than the estimates for the larger sample sizes.
The key lesson here is to always be mindful about the reason that randomized experiments are considered the gold standard for research designs that allow us to make causal claims. That is, our ability to make causal inferences from randomized experiments comes from the idea that random assignment of treatment generates independence between potential outcomes and treatment; or, alternatively, that it creates balance between experimental groups with respect to any potential confounder, whether observed or unobserved. But it is important to note that this result is only literally, mathematically, true _in expectation_; in other words, as the sample size increases toward infinity. In practice, we have only finite samples, with the inability to test for balance across all potential confounders. So while we should never consider the results of any one study to be proof of a causal relationship, we should be relatively more confident in individual experiments with large samples than in individual experiments with small samples; or, for any fixed sample size, we should be more confident in results that have been reproduced across multiple experiments than results from an individual study.
# Homework Assignment: Sesame Street and Child Cognitive Development
**Preliminaries:**
```{r}
# read in dataset
sesame <- read.csv('Data/sesame.csv') %>% as_tibble()
sesame
```
A short codebook for the relevant variables of the `sesame` dataset:
Variable Name | Variable Description
------------- | ----------------------------------------------------------------
`- id`        | `subject identification number`
`- age`       | `age in months`
`- sex`       | `male = 1, female = 2`
`- prelet`    | `pretest on letters`
`- prenumb`   | `pretest on numbers`
`- postlet`   | `posttest on letters`
`- postnumb`  | `posttest on numbers`
`- encour`    | `treatment condition: 0 = child not encouraged to watch; 1 = child encouraged to watch`
`- regular`   | `frequency of viewing: 0 = rarely watched the show; 1 = watched once/week or greater`
**Q1.** In the experiment, encouragement but not actual watching was randomized. Briefly explain why you think this was done.
**Q2.** Suppose that the investigators instead had decided not to perform a randomized experiment, but to test the effectiveness of the program simply by examining how test scores changed from before the intervention to after among the treated group. What assumption would be required for this to be an appropriate causal inference? Use data from this study to examine how realistic this assumption would have been.
**Q3.** Use an appropriate estimator to test for balance among at least three covariates not affected by the randomized encouragement.
**Q4.** Did encouragement (the variable `encour` in the dataset) lead to an increase in post-test scores for letters `postlet`) and numbers (`postnumb`)? Use a t-test and an exact test to answer this question. Are there any qualitative differences in the results you get?
**Q5.** Estimate the treatment impact separately for children with age less than or equal to 51 months and children older than 51 months. Do you note any differences in the treatment impact among these subgroups?
**Q6.** From a psychological perspective, we could be more interested in the effect of watching Sesame Street regularly (`regular`) than in the effect of being encouraged to watch Sesame Street. What would be an appropriate estimator to answer this question?
**Q7.** Comment on which of the two previous estimates can plausibly be interpreted causally. If possible, use data from this study to back up your claims.
knitr::opts_chunk$set(echo = TRUE)
# read in required packages
library(dplyr)
library(ggplot2)
library(ggpubr)
library(stargazer)
library(RATest)
set.seed(82732)
# sample size of 5000
N <- 5000
# continuous variable, drawn from a normal distribution with mean 1 and s.d. 2
x1 <- rnorm(N, mean = 1, sd = 2)
# coefficients determining data generating process for outcome variable
b0 <- 5
b1 <- 0.5
# outcome variable, linear function of coefficients, x1, and standard normal
#   distributed error term
y0 <- b0 + b1 * x1 + rnorm(N)
# generate potential outcomes representing a positive treamtent effect that is
#   highly statistically significant
y1 <- y0 + mean(y0) + rnorm(N)
# put into dataframe
sim_data <- cbind(y0, y1, x1) %>% as_tibble()
# plot simulated potential outcome data
plot_data <-
cbind(y = c(y0, y1), x1 = c(x1, x1)) %>% as_tibble() %>%
mutate(Counterfactual = c(rep('y0', N), rep('y1', N)),
d = c(rep(0, N), rep(1, N)))
p1 <- ggplot(data = plot_data, aes(x = x1, y = y, color = Counterfactual)) +
geom_point(alpha = .1) + geom_smooth(method = "lm", se = FALSE) +
guides(color = guide_legend(override.aes = list(alpha = 1)))
p2 <- ggplot(data = plot_data,
aes(y = y, x = Counterfactual, fill = Counterfactual)) +
geom_boxplot() + theme(legend.position = 'none')
p3 <- ggplot(data = plot_data, aes(x = y, fill = Counterfactual)) +
geom_density(alpha = .3)
ggarrange(p1, ggarrange(p2, p3, ncol = 2), nrow = 2)
# true value of the average treatment effect
true_treatment_effect <- mean(sim_data$y1)-mean(sim_data$y0)
true_treatment_effect
sim_data <- sim_data %>%
mutate(
d1 = case_when(x1 >= median(x1) ~ rbinom(n = nrow(sim_data), size = 1, prob = .25),
x1 < median(x1) ~ rbinom(n = nrow(sim_data), size = 1, prob = .75)))
# generate selected y as a deterministic function of d1
sim_data <-
sim_data %>% mutate(y_d1 = case_when(d1 == 0 ~ y0, d1 == 1 ~ y1)) %>%
mutate(Group_d1 = case_when(d1 == 0 ~ 'Control', d1 == 1 ~ 'Treatment'))
p4 <- ggplot(data = sim_data, aes(x = x1, y = y0)) +
geom_point(color = 'black', alpha = .3) +
geom_point(aes(x = x1, y = y1), color = 'black', alpha = .2) +
geom_point(aes(x = x1, y = y_d1, color = Group_d1), alpha = .2) +
guides(color = guide_legend(override.aes = list(alpha = 1),
title = 'Observed\npotential outcome')) + labs(y = 'y')
p5 <- ggplot(data = sim_data,
aes(y = y_d1, x = Group_d1, fill = Group_d1)) +
geom_boxplot() + theme(legend.position = 'none') +
labs(y = 'y', x = 'Experimental Group')
p6 <- ggplot(data = sim_data, aes(x = y_d1, fill = Group_d1)) +
geom_density(alpha = .3) + labs(x = 'y') +
guides(fill = guide_legend(title = 'Experimental\nGroup'))
ggarrange(p4, ggarrange(p5, p6, ncol = 2), nrow = 2)
# generate a randomized treatment indicator
sim_data$d2 <- 0
sim_data$d2[sample(N, size=N/2)] <- 1
# generate selected y as a deterministic function of d1
sim_data <-
sim_data %>% mutate(y_d2 = case_when(d2 == 0 ~ y0, d2 == 1 ~ y1)) %>%
mutate(Group_d2 = case_when(d2 == 0 ~ 'Control', d2 == 1 ~ 'Treatment'))
p7 <- ggplot(data = sim_data, aes(x = x1, y = y0)) +
geom_point(color = 'black', alpha = .3) +
geom_point(aes(x = x1, y = y1), color = 'black', alpha = .1) +
geom_point(aes(x = x1, y = y_d2, color = Group_d2), alpha = .3) +
guides(color = guide_legend(override.aes = list(alpha = 1),
title = 'Observed\npotential outcome')) + labs(y = 'y')
p8 <- ggplot(data = sim_data,
aes(y = y_d2, x = Group_d2, fill = Group_d2)) +
geom_boxplot() + theme(legend.position = 'none') +
labs(y = 'y', x = 'Experimental Group')
p9 <- ggplot(data = sim_data, aes(x = y_d2, fill = Group_d2)) +
geom_density(alpha = .3) + labs(x = 'y') +
guides(fill = guide_legend(title = 'Experimental\nGroup'))
ggarrange(p7, ggarrange(p8, p9, ncol = 2), nrow = 2)
# Estimated average treatment (observed mean difference) from this assignment:
estimated_treatment_effect2 <-
mean(sim_data$y_d2[sim_data$Group_d2=="Treatment"])-mean(sim_data$y_d2[sim_data$Group_d2=="Control"])
estimated_treatment_effect2
t_d1 <- t.test(y_d1 ~ d1, data = sim_data)
# Estimated average treatment (observed mean difference) from the non-randomized assignment:
mean(sim_data$y_d1[sim_data$d1==1])-mean(sim_data$y_d1[sim_data$d1==0])
# Same from simple linear regression model for outcome given treatment indicator:
d1_reg1 <- lm(y_d1 ~ d1, data = sim_data)
stargazer(d1_reg1, type = 'text')
t.test(y_d2 ~ d2, data = sim_data)
mean(sim_data$y_d2[sim_data$d2==1])-mean(sim_data$y_d2[sim_data$d2==0])
d2_reg1 <- lm(y_d2 ~ d2, data = sim_data)
d2_reg2 <- lm(y_d2 ~ d2 + x1, data = sim_data)
stargazer(d2_reg1, d2_reg2, type = 'text')
FET.res.d2 <- RPT(y_d2~d2,data=sim_data,test="means",n.perm=1000)
names(FET.res.d2)
#
FET.res.d2$T.obs
FET.res.d2$pvalue
ggplot() +
ylab("Count") +
xlab(paste("|t-test statistic| from ",FET.res.d2$n_perm,
" random permutations of treatment labels",sep="")) +
geom_histogram(aes(x = abs(FET.res.d2$T.perm)), bins = 30,
fill = "grey", alpha = 0.4, colour = "black") +
annotate("text",x=2.5,y=75,
label=paste("observed |t|=",round(abs(FET.res.d2$T.obs),3),sep=""),hjust=0)+
theme_classic()
p10 <- ggplot(data = sim_data,
aes(y = x1, x = Group_d1, fill = Group_d1)) +
geom_boxplot() + theme(legend.position = 'none') +
labs(y = 'y', x = 'Experimental Group')
p11 <- ggplot(data = sim_data, aes(x = x1, fill = Group_d1)) +
geom_density(alpha = .3) + labs(x = 'x1') +
guides(fill = guide_legend(title = 'Experimental\nGroup'))
p12 <- ggplot(data = sim_data,
aes(y = x1, x = Group_d2, fill = Group_d2)) +
geom_boxplot() + theme(legend.position = 'none') +
labs(y = 'y', x = 'Experimental Group')
p13 <- ggplot(data = sim_data, aes(x = x1, fill = Group_d2)) +
geom_density(alpha = .3) + labs(x = 'x1') +
guides(fill = guide_legend(title = 'Experimental\nGroup'))
ggarrange(ggarrange(p10, p11, ncol = 2, labels = list('Correlated\nTreatment'),
vjust = 1, hjust = 0),
ggarrange(p12, p13, ncol = 2, labels = list('Randomized\nTreatment'),
vjust = 1, hjust = 0), nrow = 2)
d_reg <- lm(y ~ d, data = plot_data)
# 10 draws each, different sample sizes
sampsize <- c(50, 100, 150, 200, 250, 500, 1000, 1500, 2000, 2500)
for ( i in 1:10 ) {
# create empty lists to store regression results for each sample size
assign(paste('random', sampsize[i], sep = ''), list())
}
for ( i in 1:10 ) {
# draw a sample of size n 10 times and save the regression results to list
random50[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 50))
random100[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 100))
random150[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 150))
random200[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 200))
random250[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 250))
random500[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 500))
random1000[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 1000))
random1500[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 1500))
random2000[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 2000))
random2500[[i]] <- lm(y_d2 ~ d2, data = sample_n(sim_data, 2500))
}
te_sim_mat <- matrix(rep(NA, 10 * 10), nrow = 10)
for ( i in 1:10 ) {
te_sim_mat[1, i] <- coef(random50[[i]])[2]
te_sim_mat[2, i] <- coef(random100[[i]])[2]
te_sim_mat[3, i] <- coef(random150[[i]])[2]
te_sim_mat[4, i] <- coef(random200[[i]])[2]
te_sim_mat[5, i] <- coef(random250[[i]])[2]
te_sim_mat[6, i] <- coef(random500[[i]])[2]
te_sim_mat[7, i] <- coef(random1000[[i]])[2]
te_sim_mat[8, i] <- coef(random1500[[i]])[2]
te_sim_mat[9, i] <- coef(random2000[[i]])[2]
te_sim_mat[10, i] <- coef(random2500[[i]])[2]
}
colnames(te_sim_mat) <- c('sim1', 'sim2', 'sim3', 'sim4', 'sim5', 'sim6',
'sim7', 'sim8', 'sim9', 'sim10')
te_plot_data <- te_sim_mat %>% as_tibble() %>%
mutate(sampsize = factor(as.character(sampsize), levels = sampsize))
sampsize2 <- c(rep(50, 10), rep(100, 10), rep(150, 10), rep(200, 10),
rep(250, 10), rep(500, 10), rep(1000, 10), rep(1500, 10),
rep(2000, 10), rep(2500, 10))
te <- c(unlist(te_plot_data[1, 2:11]), unlist(te_plot_data[2, 2:11]),
unlist(te_plot_data[3, 2:11]), unlist(te_plot_data[4, 2:11]),
unlist(te_plot_data[5, 2:11]), unlist(te_plot_data[6, 2:11]),
unlist(te_plot_data[7, 2:11]), unlist(te_plot_data[8, 2:11]),
unlist(te_plot_data[9, 2:11]), unlist(te_plot_data[10, 2:11]))
te_plot_data2 <- tibble(.rows = 100) %>%
mutate(sampsize = factor(as.character(sampsize2),
levels = unique(sampsize2)),
treat_effect = te)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
#  geom_vline(xintercept = confint(d_reg)[2, 1], color = 'grey',
#             linetype = 'dashed') +
#  geom_vline(xintercept = confint(d_reg)[2, 2], color = 'grey',
#             linetype = 'dashed') +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
p15 <- ggplot(data = te_plot_data2,
aes(x = sampsize, y = treat_effect, fill = sampsize)) +
geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
ggarrange(p14, p15, nrow = 2)
# read in dataset
sesame <- read.csv('Data/sesame.csv') %>% as_tibble()
sesame
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
p15 <- ggplot(data = te_plot_data2,
aes(x = sampsize, y = treat_effect, fill = sampsize)) +
geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
ggarrange(p14, p15, nrow = 2)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
p15 <- ggplot(data = te_plot_data2,
aes(x = sampsize, y = treat_effect, fill = sampsize)) +
geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
geom_hline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
ggarrange(p14, p15, nrow = 2)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
p15 <- ggplot(data = te_plot_data2,
aes(x = sampsize, y = treat_effect, fill = sampsize)) +
geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
geom_hline(yintercept = coef(d_reg)[2], color = 'red',size=1) +
theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
ggarrange(p14, p15, nrow = 2)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
#p15 <- ggplot(data = te_plot_data2,
#              aes(x = sampsize, y = treat_effect, fill = sampsize)) +
#  geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
#    geom_hline(yintercept = coef(d_reg)[2], color = 'red',size=1) +
#  theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
#ggarrange(p14, p15, nrow = 2)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
#p15 <- ggplot(data = te_plot_data2,
#              aes(x = sampsize, y = treat_effect, fill = sampsize)) +
#  geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
#    geom_hline(yintercept = coef(d_reg)[2], color = 'red',size=1) +
#  theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
#ggarrange(p14, p15, nrow = 2)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
#p15 <- ggplot(data = te_plot_data2,
#              aes(x = sampsize, y = treat_effect, fill = sampsize)) +
#  geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
#    geom_hline(yintercept = coef(d_reg)[2], color = 'red',size=1) +
#  theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
#ggarrange(p14, p15, nrow = 2)
# stripchart of treatment effect estimates for each sample size
p14 <- ggplot(data = te_plot_data, aes(y = sampsize)) +
geom_vline(xintercept = coef(d_reg)[2], color = 'red',size=1) +
geom_point(aes(x = sim1)) + geom_point(aes(x = sim2)) +
geom_point(aes(x = sim3)) + geom_point(aes(x = sim4)) +
geom_point(aes(x = sim5)) + geom_point(aes(x = sim6)) +
geom_point(aes(x = sim7)) + geom_point(aes(x = sim8)) +
geom_point(aes(x = sim9)) + geom_point(aes(x = sim10)) +
labs(x = 'Estimated Treatment Effect', y = 'Sample Size') +
xlim(4.7, 6.8) +
theme_linedraw()
p14
#p15 <- ggplot(data = te_plot_data2,
#              aes(x = sampsize, y = treat_effect, fill = sampsize)) +
#  geom_boxplot() + labs(x = 'Sample Size', y = 'Estimated Treatment Effect') +
#    geom_hline(yintercept = coef(d_reg)[2], color = 'red',size=1) +
#  theme(legend.position = 'none') + ylim(4.7, 6.8) + coord_flip()
#ggarrange(p14, p15, nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
# sample size of 5000
N <- 5000
# continuous variable, drawn from a normal distribution with mean 1 and s.d. 2
x1 <- rnorm(N, mean = 1, sd = 2)
# coefficients determining data generating process for outcome variable
b0 <- 5
b1 <- 0.5
# outcome variable, linear function of coefficients, x1, and standard normal
#   distributed error term
y0 <- b0 + b1 * x1 + rnorm(N)
# generate potential outcomes representing a positive treamtent effect that is
#   highly statistically significant
y1 <- y0 + mean(y0) + rnorm(N)
# put into dataframe
sim_data <- cbind(y0, y1, x1) %>% as_tibble()
pacman::p_load(dplyr, ggplot2, ggpubr, stargazer, RATest)
set.seed(82732)
# sample size of 5000
N <- 5000
# continuous variable, drawn from a normal distribution with mean 1 and s.d. 2
x1 <- rnorm(N, mean = 1, sd = 2)
# coefficients determining data generating process for outcome variable
b0 <- 5
b1 <- 0.5
# outcome variable, linear function of coefficients, x1, and standard normal
#   distributed error term
y0 <- b0 + b1 * x1 + rnorm(N)
# generate potential outcomes representing a positive treamtent effect that is
#   highly statistically significant
y1 <- y0 + mean(y0) + rnorm(N)
# put into dataframe
sim_data <- cbind(y0, y1, x1) %>% as_tibble()
View(sim_data)
# plot simulated potential outcome data
plot_data <-
cbind(y = c(y0, y1), x1 = c(x1, x1)) %>% as_tibble() %>%
mutate(Counterfactual = c(rep('y0', N), rep('y1', N)),
d = c(rep(0, N), rep(1, N)))
p1 <- ggplot(data = plot_data, aes(x = x1, y = y, color = Counterfactual)) +
geom_point(alpha = .1) + geom_smooth(method = "lm", se = FALSE) +
guides(color = guide_legend(override.aes = list(alpha = 1)))
p2 <- ggplot(data = plot_data,
aes(y = y, x = Counterfactual, fill = Counterfactual)) +
geom_boxplot() + theme(legend.position = 'none')
p3 <- ggplot(data = plot_data, aes(x = y, fill = Counterfactual)) +
geom_density(alpha = .3)
ggarrange(p1, ggarrange(p2, p3, ncol = 2), nrow = 2)
# DEFINE POTENTIAL OUTCOMES
N <- 5000
Y0 = rnorm(N, mean = 1, sd = 2)
treatment_effect <- 3
Y1 = Y0 + treatment_effect + rnorm(N)
# DEFINE PARAMETERS
N <- 5000
treatment_effect <- 3
# DEFINE POTENTIAL OUTCOMES
Y0 = rnorm(N, mean = 1, sd = 2)
Y1 = Y0 + treatment_effect + rnorm(N)
# COMBINE TO DATAFRAME
df <- data.frame(Y0 = Y0, Y1 = Y1, stringsAsFactors = F)
View(df)
rbinom(20, 1, 0.5)
df1 <- df %>%
mutate(D = rbinom(nrow(.), 1, 0.5))
View(df1)
df1 <- df %>%
mutate(D = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D == 1 ~ Y1, D == 0 ~ Y0))
View(df1)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(teffect = Y0-Y1)
View(df)
df$teffect
df$teffect %>% summary()
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(teffect = Y1 - Y0)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D == 1 ~ Y1, D == 0 ~ Y0))
View(df)
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red')
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red', alpha = 0.5)
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_density(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5)
# BOXPLOT
ggplot() +
geom_boxplo(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_boxplo(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5)
# BOXPLOT
ggplot() +
geom_boxplot(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_boxplot(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5)
# DENSITY PLOT
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_density(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5)
mean(df$Y1)-mean(df$Y0)
# 2. average of individual treatment effects
mean(df$teffect)
# DENSITY PLOT
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_density(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5) +
xlab('potential outcomes')
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df %>% subset(., D == 1) %>% pull(Y)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df %>% subset(., D == 1) %>% pull(Y) %>% mean(., na.rm = T)
df %>% subset(., D == 0) %>% pull(Y) %>% mean(., na.rm = T)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df %>% subset(., D == 1) %>% pull(Y) %>% mean(., na.rm = T)
df %>% subset(., D == 0) %>% pull(Y) %>% mean(., na.rm = T)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D == 0) %>% pull(Y) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_confounder = case_when(Y0 < 0 ~ rbinom(1, 1, 0.2), Y0 >= 0 ~ rbinom(1, 1, 0.8)))
View(df)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_confounder = case_when(Y0 < 0 ~ rbinom(1, 1, 0.5), Y0 >= 0 ~ rbinom(1, 1, 0.5)))
View(df)
