knitr::opts_chunk$set(echo = TRUE)
# DEFINE PARAMETERS
N <- 5000
treatment_effect <- 3
intercept <- 1.5
beta1 <- 2.5
pacman::p_load(dplyr, ggplot2, ggpubr, stargazer, RATest)
set.seed(82732)
rnorm(N, mean = 2, sd = 0)
rnorm(N, mean = 0, sd = 1)
# DEFINE PARAMETERS
N <- 5000
treatment_effect <- 3
intercept <- 1.5
beta1 <- 2.5
# DEFINE POTENTIAL OUTCOMES
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
# COMBINE TO DATAFRAME
df <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F)
# PLOT OF DATA GENERATING PROCESS FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_point(data = df, aes(x = X, y = Y0), fill = 'red', alpha = 0.5) +
geom_point(data = df, aes(x = X, y = Y1), fill = 'blue', alpha = 0.5) +
xlab('X') + ylab('Y')
# PLOT OF DATA GENERATING PROCESS FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_jitter(data = df, aes(x = X, y = Y0), fill = 'red', alpha = 0.5) +
geom_jitter(data = df, aes(x = X, y = Y1), fill = 'blue', alpha = 0.5) +
xlab('X') + ylab('Y')
# PLOT OF DATA GENERATING PROCESS FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_jitter(data = df, aes(x = X, y = Y0), color = 'red', alpha = 0.5) +
geom_jitter(data = df, aes(x = X, y = Y1), color = 'blue', alpha = 0.5) +
xlab('X') + ylab('Y')
treatment_effect <- 5
intercept <- 1.5
beta1 <- 2.5
# DEFINE POTENTIAL OUTCOMES
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
# COMBINE TO DATAFRAME
df <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(teffect = Y1 - Y0)
# PLOT OF DATA GENERATING PROCESS FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_jitter(data = df, aes(x = X, y = Y0), color = 'red', alpha = 0.5) +
geom_jitter(data = df, aes(x = X, y = Y1), color = 'blue', alpha = 0.5) +
xlab('X') + ylab('Y')
intercept <- 0.5
beta1 <- 1.5
# DEFINE POTENTIAL OUTCOMES
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
# COMBINE TO DATAFRAME
df <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F)
# PLOT OF DATA GENERATING PROCESS FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_jitter(data = df, aes(x = X, y = Y0), color = 'red', alpha = 0.5) +
geom_jitter(data = df, aes(x = X, y = Y1), color = 'blue', alpha = 0.5) +
xlab('X') + ylab('Y')
# DENSITY PLOT OF TREATMENT AND CONTROL GROUP
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_density(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5) +
xlab('potential outcomes')
# 1. simple difference in means
mean(df$Y1)-mean(df$Y0)
# 2. average of individual treatment effects
mean(df$teffect)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(teffect = Y1 - Y0)
# 1. simple difference in means
mean(df$Y1)-mean(df$Y0)
# 2. average of individual treatment effects
mean(df$teffect)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D == 1 ~ Y1, D == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D == 0) %>% pull(Y) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_random = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D_random == 1 ~ Y1, D_random == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D == 0) %>% pull(Y) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_random = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D_random == 1 ~ Y1, D_random == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D_random == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_random == 0) %>% pull(Y) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_nonrandom = case_when(X1 >= median(X1) ~ rbinom(n = nrow(.), size = 1, prob = .25),
X1 < median(X1) ~ rbinom(n = nrow(.), size = 1, prob = .75)))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_nonrandom = case_when(X1 >= median(X1) ~ rbinom(n = nrow(.), size = 1, prob = .25),
X1 < median(X1) ~ rbinom(n = nrow(.), size = 1, prob = .75))) %>%
mutate(Y_nonrandom = case_when(D_nonrandom == 1 ~ Y1, D_confounder == 0 ~ Y0))
df <- df %>%
mutate(D_nonrandom = case_when(X >= threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .25),
X < threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .75))) %>%
mutate(Y_nonrandom = case_when(D_nonrandom == 1 ~ Y1, D_confounder == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
threshold_x <- median(X)
df <- df %>%
mutate(D_nonrandom = case_when(X >= threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .25),
X < threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .75))) %>%
mutate(Y_nonrandom = case_when(D_nonrandom == 1 ~ Y1, D_confounder == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
threshold_x <- median(X)
df <- df %>%
mutate(D_nonrandom = case_when(X >= threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .25),
X < threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .75)))
df <- df %>%
mutate(D_nonrandom = case_when(X >= threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .25),
X < threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .75))) %>%
mutate(Y_nonrandom = case_when(D_nonrandom == 1 ~ Y1, D_nonrandom == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D_nonrandom == 1) %>% pull(Y_nonrandom) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_nonrandom == 0) %>% pull(Y_nonrandom) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
simulateData <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
teffect <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(teffect = Y1 - Y0) %>% pull(teffect) %>% mean(., na.rm = T)
paste('number of observations: ', N, " | estimated ATE: ", teffect, sep = '') %>% print()
}
simulateDataAndATE <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
teffect <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(teffect = Y1 - Y0) %>% pull(teffect) %>% mean(., na.rm = T)
paste('number of observations: ', N, " | estimated ATE: ", teffect, sep = '') %>% print()
}
simulateDataAndATE <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
teffect <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(teffect = Y1 - Y0) %>% pull(teffect) %>% mean(., na.rm = T)
paste('number of observations: ', N, " | estimated ATE: ", teffect, sep = '') %>% print()
}
# RUN LOOP
for(n in c(20, 50, 100, 1000, 2000, 5000, 10000, 20000, 500000)){
simulateDataAndATE(N = n)
}
# RUN LOOP
for(n in c(10, 20, 50, 100, 1000, 2000, 5000, 10000, 20000, 500000)){
simulateDataAndATE(N = n)
}
# FUNCTION TO SIMULATE DATASET WITH VARYING SIZE
simulateDataAndATE <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
teffect <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(teffect = Y1 - Y0) %>% pull(teffect) %>% mean(., na.rm = T)
paste('number of observations: ', N, " | estimated ATE: ", teffect, sep = '') %>% print()
}
# RUN LOOP
for(n in c(2, 5, 10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000, 500000)){
simulateDataAndATE(N = n)
}
# FUNCTION TO SIMULATE DATASET WITH VARYING SIZE
simulateDataAndATE <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
teffect <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(teffect = Y1 - Y0) %>% pull(teffect) %>% mean(., na.rm = T)
paste('number of observations: ', N, " | true ATE: 5 | estimated ATE: ", teffect, sep = '') %>% print()
}
# RUN LOOP
for(n in c(1, 2, 5, 10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000)){
simulateDataAndATE(N = n)
}
# FUNCTION TO SIMULATE DATASET WITH VARYING SIZE
simulateDataAndATE <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
teffect <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(teffect = Y1 - Y0) %>% pull(teffect) %>% mean(., na.rm = T)
paste('number of observations: ', N, " | true ATE: 5 | estimated ATE: ", teffect, sep = '') %>% print()
}
# RUN LOOP
for(n in c(1, 2, 5, 10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000)){
simulateDataAndATE(N = n)
}
df <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(D_random = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D_random == 1 ~ Y1, D_random == 0 ~ Y0))
y_D1_mean <- df %>% subset(., D_random == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_random == 0) %>% pull(Y) %>% mean(., na.rm = T)
y_D1_mean <- df %>% subset(., D_random == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_random == 0) %>% pull(Y) %>% mean(., na.rm = T)
teffect <- y_D1_mean - y_D0_mean
teffect
simulateDataAndATE <- function(N){
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
df <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F) %>%
mutate(D_random = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D_random == 1 ~ Y1, D_random == 0 ~ Y0))
y_D1_mean <- df %>% subset(., D_random == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_random == 0) %>% pull(Y) %>% mean(., na.rm = T)
teffect <- y_D1_mean - y_D0_mean
paste('number of observations: ', N, " | true ATE: 5 | estimated ATE: ", teffect, sep = '') %>% print()
}
# RUN LOOP
for(n in c(1, 2, 5, 10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000)){
simulateDataAndATE(N = n)
}
# RUN LOOP
for(n in c(2, 5, 10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000)){
simulateDataAndATE(N = n)
}
# RUN LOOP
for(n in c(10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000)){
simulateDataAndATE(N = n)
}
# RUN LOOP
for(n in c(10, 20, 30, 50, 100, 150, 1000, 2000, 5000, 10000, 20000, 50000)){
simulateDataAndATE(N = n)
}
# DENSITY PLOT OF X FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_density(data = df %>% subset(., D == 0), aes(x = X), fill = 'red', alpha = 0.5) +
geom_density(data = df %>% subset(., D == 1), aes(x = X), fill = 'blue', alpha = 0.5) +
xlab('potential outcomes')
# DENSITY PLOT OF X FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_density(data = df %>% subset(., D_random == 0), aes(x = X), fill = 'red', alpha = 0.5) +
geom_density(data = df %>% subset(., D_random == 1), aes(x = X), fill = 'blue', alpha = 0.5) +
xlab('potential outcomes')
# DENSITY PLOT OF X FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_density(data = df %>% subset(., D_random == 0), aes(x = X), fill = 'red', alpha = 0.5) +
geom_density(data = df %>% subset(., D_random == 1), aes(x = X), fill = 'blue', alpha = 0.5) +
xlab('X')
tinytex::parse_packages()
tinytex::parse_packages("filename.log")
tinytex::parse_packages("Class01-RandomizedExperiments.log")
lm(Y_nonrandom ~ D_nonrandom, , data = df) %>% summary()
lm(Y_nonrandom ~ D_nonrandom, , data = df) %>% summary()
# DEFINE PARAMETERS
N <- 5000
treatment_effect <- 5
intercept <- 0.5
beta1 <- 1.5
# DEFINE POTENTIAL OUTCOMES
X <- rnorm(N, mean = 1, sd = 2)
Y0 = intercept + beta1*X + rnorm(N, mean = 0, sd = 1)
Y1 = Y0 + treatment_effect + rnorm(N, mean = 0, sd = 1)
# COMBINE TO DATAFRAME
df <- data.frame(Y0 = Y0, Y1 = Y1, X = X, stringsAsFactors = F)
# PLOT OF DATA GENERATING PROCESS FOR TREATMENT AND CONTROL GROUP
ggplot() +
geom_jitter(data = df, aes(x = X, y = Y0), color = 'red', alpha = 0.5) +
geom_jitter(data = df, aes(x = X, y = Y1), color = 'blue', alpha = 0.5) +
xlab('X') + ylab('Y')
# DENSITY PLOT OF TREATMENT AND CONTROL GROUP
ggplot() +
geom_density(data = df, aes(x = Y0), fill = 'red', alpha = 0.5) +
geom_density(data = df, aes(x = Y1), fill = 'blue', alpha = 0.5) +
xlab('potential outcomes')
# 1. simple difference in means
mean(df$Y1)-mean(df$Y0)
# 2. average of individual treatment effects
df <- df %>% mutate(teffect = Y1 - Y0)
mean(df$teffect)
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
df <- df %>%
mutate(D_random = rbinom(nrow(.), 1, 0.5)) %>%
mutate(Y = case_when(D_random == 1 ~ Y1, D_random == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D_random == 1) %>% pull(Y) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_random == 0) %>% pull(Y) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
threshold_x <- median(X)
df <- df %>%
mutate(D_nonrandom = case_when(X >= threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .25),
X < threshold_x ~ rbinom(n = nrow(.), size = 1, prob = .75))) %>%
mutate(Y_nonrandom = case_when(D_nonrandom == 1 ~ Y1, D_nonrandom == 0 ~ Y0))
# CREATE TREATMENT INDICATOR AND ACTUAL OUTCOME
y_D1_mean <- df %>% subset(., D_nonrandom == 1) %>% pull(Y_nonrandom) %>% mean(., na.rm = T)
y_D0_mean <- df %>% subset(., D_nonrandom == 0) %>% pull(Y_nonrandom) %>% mean(., na.rm = T)
y_D1_mean - y_D0_mean
lm(Y_nonrandom ~ D_nonrandom, , data = df) %>% summary()
lm(Y_nonrandom ~ D_nonrandom + X, data = df) %>% summary()
